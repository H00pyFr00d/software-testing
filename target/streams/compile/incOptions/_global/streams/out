[0m[[0m[0mdebug[0m] [0m[0mCreated transactional ClassFileManager with tempDir = /home/h00pyfr00d/Documents/software-testing/target/scala-3.6.2/classes.bak[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to delete class files:[0m
[0m[[0m[0mdebug[0m] [0m[0mWe backup class files:[0m
[0m[[0m[0mdebug[0m] [0m[0mCreated transactional ClassFileManager with tempDir = /home/h00pyfr00d/Documents/software-testing/target/scala-3.6.2/classes.bak[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to delete class files:[0m
[0m[[0m[0mdebug[0m] [0m[0mWe backup class files:[0m
[0m[[0m[0mdebug[0m] [0m[0mRegistering generated classes:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Bags$BagImpl$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$RecV$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyBag.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyInt$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$FlatMap.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyVariant.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$RecV.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$SymGenerator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$RecordV$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$StringV$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Rec.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$When$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Bool.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$VariantV$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Typer.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Lambda.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Rec$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Bags$Bag.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyBag$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyString$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Times$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Count.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Case$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Anno$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Unit$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Bag.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Expr.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Lambda$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Minus.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Minus$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Str$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Plus$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Interpreter$SubstExpr$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Substitutable.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Concat$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Num.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Comprehension$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Length.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Guard$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Bind.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$BoolV.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Case.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Pair$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$LetFun$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Second$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Interpreter.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Length$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Sum.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$When.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Var$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Index$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$NumV$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$PairV$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Record.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyPair$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$NumV.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$FlatMap$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Bags.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Interpreter$Value$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Guard.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyFun$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$LetPair.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$LetRecord$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Parser.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyRecord$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyRecord.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Comprehension.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Type.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Diff$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$BoolV$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Bags$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$First$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Anno.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Less.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Record$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Interpreter$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Count$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyUnit$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Sum$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$FunV$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$LetRecord.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Variant$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Str.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$IfThenElse$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Diff.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$FunV.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$First.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$StringV.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Variant.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Proj.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Let$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$IfThenElse.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Apply$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Num$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Pair.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$CLet.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Typer$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$LetPair$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Proj$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Bool$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Second.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyFun.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Eq$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyBool$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Less$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$LetRec$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Value.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$BagV$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Times.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Bind$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$RecordV.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyPair.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$VariantV.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$LetRec.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$UnitV$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$BagV.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$CLet$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Index.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Concat.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$PairV.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Var.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Plus.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyVariant$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Eq.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Bag$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Apply.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$LetFun.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Let.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Bags$BagImpl$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$RecV$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyBag.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyInt$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$FlatMap.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyVariant.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$RecV.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$SymGenerator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$RecordV$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$StringV$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Rec.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$When$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Bool.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$VariantV$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Typer.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Lambda.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Rec$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Bags$Bag.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyBag$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyString$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Times$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Count.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Case$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Anno$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Unit$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Bag.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Expr.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Lambda$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Minus.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Minus$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Str$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Plus$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Interpreter$SubstExpr$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Substitutable.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Concat$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Num.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Comprehension$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Length.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Guard$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Bind.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$BoolV.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Case.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Pair$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$LetFun$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Second$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Interpreter.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Length$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Sum.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$When.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Var$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Index$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$NumV$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$PairV$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Record.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyPair$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$NumV.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$FlatMap$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Bags.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Interpreter$Value$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Guard.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyFun$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$LetPair.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$LetRecord$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Parser.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyRecord$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyRecord.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Comprehension.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Type.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Diff$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$BoolV$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Bags$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$First$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Anno.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Less.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Record$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Interpreter$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Count$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyUnit$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Sum$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$FunV$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$LetRecord.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Variant$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Str.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$IfThenElse$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Diff.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$FunV.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$First.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$StringV.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Variant.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Proj.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Let$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$IfThenElse.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Apply$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Num$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Pair.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$CLet.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Typer$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$LetPair$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Proj$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Bool$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Second.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyFun.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Eq$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyBool$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Less$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$LetRec$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Value.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$BagV$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Times.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Bind$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$RecordV.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyPair.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$VariantV.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$LetRec.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$UnitV$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$BagV.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$CLet$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Index.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Concat.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$PairV.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Var.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Plus.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$TyVariant$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Eq.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Bag$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Apply.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$LetFun.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Syntax$Let.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0mRemoving the temporary directory used for backing up class files: /home/h00pyfr00d/Documents/software-testing/target/scala-3.6.2/classes.bak[0m
